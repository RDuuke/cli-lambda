# {{ project_name }}

Este proyecto contiene una funci√≥n de AWS Lambda desarrollada en TypeScript, siguiendo una arquitectura de capas para una clara separaci√≥n de responsabilidades.

## üöÄ Requisitos Previos

Antes de empezar, aseg√∫rate de tener instalado:

- Node.js (versi√≥n 18 o superior)
- npm o yarn
- AWS CLI

## üì¶ Gesti√≥n de Dependencias con AWS CodeArtifact

Este proyecto utiliza AWS CodeArtifact para gestionar las dependencias de npm. Para poder instalar los paquetes, primero debes configurar tu cliente de npm para autenticarte con CodeArtifact. Ejecuta el siguiente comando, reemplazando los valores de placeholder:

```bash
aws codeartifact login --tool npm --repository <TU_REPOSITORIO> --domain <TU_DOMINIO_CODEARTIFACT> --domain-owner <ID_DE_CUENTA_AWS>
```

Una vez configurado, puedes instalar las dependencias con:

```bash
npm install
```

## üèóÔ∏è Arquitectura de Capas

El proyecto est√° estructurado en tres capas principales para separar la l√≥gica de negocio de los detalles de implementaci√≥n.

### 1. Domain
- **Ubicaci√≥n**: `src/domain`
- **Prop√≥sito**: Contiene la l√≥gica de negocio pura y las entidades del dominio. No debe tener dependencias de frameworks o servicios externos (AWS, bases de datos, etc.). Es el coraz√≥n de tu aplicaci√≥n.
- **Alias de importaci√≥n**: `@domain/*`

### 2. Application
- **Ubicaci√≥n**: `src/application`
- **Prop√≥sito**: Orquesta los casos de uso. Es responsable de coordinar las operaciones del dominio y de conectar la infraestructura con el dominio. Aqu√≠ se define qu√© hace la aplicaci√≥n.
- **Alias de importaci√≥n**: `@application/*`

### 3. Infrastructure
- **Ubicaci√≥n**: `src/infrastructure`
- **Prop√≥sito**: Implementa los detalles tecnol√≥gicos. Contiene el handler de la Lambda, clientes de servicios de AWS (como S3, DynamoDB), repositorios de bases de datos y cualquier otro c√≥digo que interact√∫e con el mundo exterior.
- **Alias de importaci√≥n**: `@infrastructure/*`

## üíª C√≥mo Programar

El flujo de desarrollo t√≠pico es el siguiente:

1.  **Define la l√≥gica en el Dominio**: Empieza creando los modelos y la l√≥gica de negocio en la capa `domain`.
2.  **Crea un Caso de Uso**: En la capa `application`, crea un caso de uso que importe y utilice los modelos del dominio para cumplir un objetivo espec√≠fico.
3.  **Implementa la Infraestructura**: En la capa `infrastructure`, crea el handler de la Lambda. El handler debe recibir el evento de AWS, llamar al caso de uso correspondiente en la capa de aplicaci√≥n y devolver la respuesta.

Gracias a los alias configurados en `tsconfig.json` y `jest.config.ts`, puedes importar m√≥dulos de forma limpia y desacoplada:

```typescript
// Ejemplo en application/usecase.ts
import { MyModel } from '@domain/my-model';

// Ejemplo en infrastructure/handler.ts
import { myUseCase } from '@application/my-use-case';
```

## üß™ Pruebas

El proyecto est√° configurado con Jest para pruebas unitarias y de integraci√≥n. Los archivos de prueba deben ubicarse en el directorio `test/` en la ra√≠z del proyecto.

Para ejecutar las pruebas, usa:

```bash
npm run test
```

## üìú Scripts Disponibles

- `npm run build`: Transpila el c√≥digo TypeScript a JavaScript usando `esbuild`.
- `npm run test`: Ejecuta las pruebas con Jest.
- `npm run lint`: Analiza el c√≥digo en busca de errores de estilo con ESLint.

## üöÄ Despliegue

El despliegue de esta funci√≥n Lambda se gestiona a trav√©s del pipeline de Azure DevOps definido en el archivo `azure-pipelines.yml`.