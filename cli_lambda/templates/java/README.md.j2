# {{ project_name }}

Este proyecto contiene una funci√≥n de AWS Lambda desarrollada en Java, siguiendo una arquitectura de capas para una clara separaci√≥n de responsabilidades.

## üöÄ Requisitos Previos

Antes de empezar, aseg√∫rate de tener instalado:

- Java Development Kit (JDK) 11 o superior
- Apache Maven
- AWS CLI

## üì¶ Gesti√≥n de Dependencias con AWS CodeArtifact

Este proyecto utiliza AWS CodeArtifact para gestionar las dependencias de Maven. Para poder descargar los paquetes, primero debes configurar tu cliente de Maven para autenticarte con CodeArtifact. Ejecuta el siguiente comando, reemplazando los valores de placeholder:

```bash
aws codeartifact get-repository-endpoint --domain <TU_DOMINIO_CODEARTIFACT> --domain-owner <ID_DE_CUENTA_AWS> --repository <TU_REPOSITORIO> --format maven
```

Este comando te dar√° la configuraci√≥n que debes a√±adir a tu archivo `~/.m2/settings.xml`.

Una vez configurado, puedes compilar el proyecto y descargar las dependencias con:

```bash
mvn clean install
```

## üèóÔ∏è Arquitectura de Capas

El proyecto est√° estructurado en tres capas principales para separar la l√≥gica de negocio de los detalles de implementaci√≥n.

### 1. Domain
- **Ubicaci√≥n**: `src/main/java/com/{{package_name}}/domain`
- **Prop√≥sito**: Contiene la l√≥gica de negocio pura, las entidades (Modelos) y los Data Transfer Objects (DTOs). No debe tener dependencias de frameworks o servicios externos.

### 2. Application
- **Ubicaci√≥n**: `src/main/java/com/{{package_name}}/application`
- **Prop√≥sito**: Orquesta los casos de uso (Use Cases). Es responsable de coordinar las operaciones del dominio.

### 3. Infrastructure
- **Ubicaci√≥n**: `src/main/java/com/{{package_name}}/infrastructure`
- **Prop√≥sito**: Implementa los detalles tecnol√≥gicos. Contiene el Handler de la Lambda, clientes de servicios de AWS, y cualquier otro c√≥digo que interact√∫e con el mundo exterior.

## üíª C√≥mo Programar

El flujo de desarrollo t√≠pico es el siguiente:

1.  **Define el Dominio**: Crea los modelos y DTOs en la capa `domain`.
2.  **Crea un Caso de Uso**: En la capa `application`, implementa la l√≥gica de negocio en un `UseCase`.
3.  **Implementa la Infraestructura**: En la capa `infrastructure`, el `Handler` recibe el evento de AWS, llama al `UseCase` correspondiente y devuelve la respuesta.

## ‚úÖ Calidad de C√≥digo

Este proyecto utiliza **Checkstyle** para asegurar un estilo de c√≥digo consistente. El an√°lisis se ejecuta autom√°ticamente cada vez que compilas el proyecto. Si hay violaciones de estilo, la compilaci√≥n fallar√°.

Puedes ejecutar el an√°lisis manualmente con:

```bash
mvn checkstyle:check
```

## üß™ Pruebas

El proyecto est√° configurado con **JUnit 5** y **Mockito** para pruebas unitarias. Los archivos de prueba se encuentran en `src/test/java`.

Para ejecutar las pruebas, usa:

```bash
mvn test
```

## üì¶ Empaquetado y Despliegue

Para empaquetar la aplicaci√≥n en un archivo JAR listo para desplegar en AWS Lambda, ejecuta:

```bash
mvn clean package
```

El JAR final se encontrar√° en el directorio `target/`.

El despliegue se puede realizar utilizando el archivo `template.yaml` y los comandos de AWS SAM o la consola de AWS.
