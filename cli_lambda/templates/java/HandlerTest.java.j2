package com.{{ package_name }}.infrastructure;

import com.{{ package_name }}.application.usecase.HelloUseCase;
import com.{{ package_name }}.domain.dto.InputDto;
import com.{{ package_name }}.domain.dto.OutputDto;
import com.{{ package_name }}.domain.dto.ResponseEntity;
import com.{{ package_name }}.domain.dto.StatusCode;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.verify;

@ExtendWith(MockitoExtension.class)
public class HandlerTest {

    @Mock
    private HelloUseCase helloUseCase;

    @InjectMocks
    private Handler handler;

    private InputDto inputDto;

    @BeforeEach
    void setUp() {
        inputDto = new InputDto();
        inputDto.setMessage("Test");
    }

    @Test
    public void shouldReturnSuccessResponse() {
        // Arrange
        OutputDto useCaseOutput = new OutputDto("Hello, Test");
        when(helloUseCase.execute(inputDto)).thenReturn(useCaseOutput);

        // Act
        ResponseEntity<OutputDto> response = handler.handleRequest(inputDto, null);

        // Assert
        assertNotNull(response);
        assertEquals(StatusCode.OK.getCode(), response.getStatusCode());
        assertEquals("Hello, Test", response.getBody().getMessage());

        // Verify that the use case was called
        verify(helloUseCase).execute(inputDto);
    }
}